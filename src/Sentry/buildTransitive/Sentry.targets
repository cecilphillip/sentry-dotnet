<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Defaults for Sentry CLI are set here.  Any of these properties can be set in the application to override the defaults. -->
  <PropertyGroup>

    <!-- This property controls whether symbols will be uploaded to Sentry. -->
    <SentryUploadSymbols Condition="'$(SentryUploadSymbols)' == '' And '$(Configuration)' == 'Release' And '$(DebugType)' != 'embedded'">true</SentryUploadSymbols>

    <!-- These properties control creation of release information in Sentry. -->
    <SentryRelease Condition="'$(SentryRelease)' == ''">$(SENTRY_RELEASE)</SentryRelease>
    <SentryCreateRelease Condition="'$(SentryCreateRelease)' == '' And '$(Configuration)' == 'Release' And ('$(OutputType)' == 'Exe' Or '$(AndroidApplication)' == 'true') And '$(IsTestProject)' != 'true'">true</SentryCreateRelease>

    <!-- Additional properties can go here. -->

    <!-- This property controls if the Sentry CLI is to be used at all.  Setting false will disable all Sentry CLI usage. -->
    <UseSentryCLI Condition="'$(UseSentryCLI)' == '' And ('$(SentryUploadSymbols)' == 'true' Or '$(SentryCreateRelease)' == 'true')">true</UseSentryCLI>

    <!--
      The Sentry configuration can be set manually in MSBuild properties if desired.
      Otherwise the default configuration will be used, as reported by "sentry-cli info".
      The defaults can be set either via config file, or environment variables, per: https://docs.sentry.io/product/cli/configuration/
    -->
    <SentryCLIOptions Condition="'$(SentryApiKey)' != ''">$(SentryCLIOptions) --api-key $(SentryApiKey)</SentryCLIOptions>
    <SentryCLIOptions Condition="'$(SentryAuthToken)' != ''">$(SentryCLIOptions) --auth-token $(SentryAuthToken)</SentryCLIOptions>
    <SentryCLIOptions Condition="'$(SentryUrl)' != ''">$(SentryCLIOptions) --url $(SentryUrl)</SentryCLIOptions>
    <SentryCLIOptions Condition="'$(SentryOrg)' != ''">$(SentryCLIOptions) --org '$(SentryOrg)'</SentryCLIOptions>
    <SentryCLIOptions Condition="'$(SentryProject)' != ''">$(SentryCLIOptions) --project '$(SentryProject)'</SentryCLIOptions>
  </PropertyGroup>

  <Target Name="_PrepareSentryCLI" AfterTargets="DispatchToInnerBuilds;AfterBuild" Condition="'$(UseSentryCLI)' == 'true'">
    <!-- Sentry CLI comes from the Sentry Nuget package when installed. -->
    <PropertyGroup Condition="'$(SentryCLIDirectory)' == ''">
      <SentryCLIDirectory Condition="'$(PkgSentry)' != ''">$(PkgSentry)\tools\</SentryCLIDirectory>
    </PropertyGroup>

    <!--
      Choose the correct Sentry CLI executable depending on OS platform and architecture.
      For Windows on Arm64, we'll use the X64 build for now (which should run via emulation).
      Switch to a Windows Arm64 build when available. See https://github.com/getsentry/sentry-cli/issues/1426
    -->
    <PropertyGroup Condition="'$(SentryCLI)' == '' And '$(SentryCLIDirectory)' != ''">
      <_OSArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)</_OSArchitecture>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('OSX')) And $(_OSArchitecture) == 'Arm64'">$(SentryCLIDirectory)sentry-cli-Darwin-arm64</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('OSX')) And $(_OSArchitecture) == 'X64'">$(SentryCLIDirectory)sentry-cli-Darwin-x86_64</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Linux')) And $(_OSArchitecture) == 'Arm64'">$(SentryCLIDirectory)sentry-cli-Linux-aarch64</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Linux')) And $(_OSArchitecture) == 'X86'">$(SentryCLIDirectory)sentry-cli-Linux-i686</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Linux')) And $(_OSArchitecture) == 'X64'">$(SentryCLIDirectory)sentry-cli-Linux-x86_64</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Windows')) And $(_OSArchitecture) == 'Arm64'">$(SentryCLIDirectory)sentry-cli-Windows-x86_64</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Windows')) And $(_OSArchitecture) == 'X86'">$(SentryCLIDirectory)sentry-cli-Windows-i686</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Windows')) And $(_OSArchitecture) == 'X64'">$(SentryCLIDirectory)sentry-cli-Windows-x86_64</SentryCLI>
      <SentryCLI Condition="!Exists('$(SentryCLI)')"/>
    </PropertyGroup>

    <PropertyGroup>
      <_SentryCLIInfoOptions Condition="'$(SentryOrg)' != '' And '$(SentryProject)' != ''">--no-defaults</_SentryCLIInfoOptions>
    </PropertyGroup>
    <Exec Command="'$(SentryCLI)' info $(_SentryCLIInfoOptions)" Condition="'$(SentryCLI)' != ''" IgnoreExitCode="true" ConsoleToMsBuild="true" StandardOutputImportance="Low">
      <Output TaskParameter="ExitCode" PropertyName="SentryCLIExitCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="SentryCLIOutput" />
    </Exec>

    <PropertyGroup Condition="'$(SentryCLIExitCode)' != '0'">
      <_SentryCLIRequestFailed Condition="$(SentryCLIOutput.Contains('API request failed'))">true</_SentryCLIRequestFailed>
    </PropertyGroup>
    <Warning Condition="'$(_SentryCLIRequestFailed)' != ''"
      Text="Sentry API request failed.  Either the authentication info is invalid, or the Sentry server could not be reached." />

    <Message Importance="High" Condition="'$(SentryCLIExitCode)' != '0' And '$(_SentryCLIRequestFailed)' == ''"
      Text="The Sentry CLI is not fully configured with authentication, organization, and project." />
    <PropertyGroup Condition="'$(SentryCLIExitCode)' != '0'">
      <SentryCLI />
    </PropertyGroup>
  </Target>

  <UsingTask TaskName="SentryGetReleaseFromInformationalVersion" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <AssemblyPath Required="true" />
      <Release Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.Reflection"/>
      <Code Type="Fragment" Language="cs">
  <![CDATA[
  try
  {
    var path = Path.GetFullPath(AssemblyPath);
    var assembly = Assembly.LoadFile(path);

    var assemblyName = assembly.GetName();
    var name = assemblyName.Name;
    var version = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion;
    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))
    {
      Release = $"{name}@{version}";
    }
  }
  catch
  {
  }
  ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="SentryGetReleaseFromAppManifest" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"
    Condition="$(TargetFramework.Contains('ios')) Or $(TargetFramework.Contains('maccatalyst'))">
    <ParameterGroup>
      <AppManifestPath Required="true" />
      <Release Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="$(_XamarinTaskAssembly)" />
      <Using Namespace="Xamarin.MacDev"/>
      <Code Type="Fragment" Language="cs">
  <![CDATA[
  try
  {
    var plist = PDictionary.FromFile(AppManifestPath);

    var packageName = plist.GetCFBundleIdentifier();
    var packageVersion = plist.GetCFBundleShortVersionString();
    var buildVersion = plist.GetCFBundleVersion();

    Release = $"{packageName}@{packageVersion}+{buildVersion}";
  }
  catch
  {
  }
  ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="_GetSentryRelease" AfterTargets="DispatchToInnerBuilds;AfterBuild" Condition="'$(SentryCreateRelease)' == 'true' And '$(UseSentryCLI)' == 'true'">
    <PropertyGroup Condition="'$(SentryRelease)' == '' And $(TargetFramework.Contains('android'))">
      <SentryRelease>$(ApplicationId)@$(ApplicationDisplayVersion)+$(ApplicationVersion)</SentryRelease>
    </PropertyGroup>

    <SentryGetReleaseFromAppManifest AppManifestPath="$(_TemporaryAppManifest)"
      Condition="'$(SentryRelease)' == '' And ($(TargetFramework.Contains('ios')) Or $(TargetFramework.Contains('maccatalyst')))">
      <Output TaskParameter="Release" PropertyName="SentryRelease" />
    </SentryGetReleaseFromAppManifest>

    <SentryGetReleaseFromInformationalVersion Condition="'$(SentryRelease)' == ''" AssemblyPath="$(IntermediateOutputPath)$(TargetName)$(TargetExt)">
      <Output TaskParameter="Release" PropertyName="SentryRelease" />
    </SentryGetReleaseFromInformationalVersion>

    <GetAssemblyIdentity Condition="'$(SentryRelease)' == '' And '$(TargetName)' != ''" AssemblyFiles="$(IntermediateOutputPath)$(TargetName)$(TargetExt)">
      <Output TaskParameter="Assemblies" ItemName="MainAssemblyIdentity" />
    </GetAssemblyIdentity>
    <PropertyGroup Condition="'$(SentryRelease)' == '' And '@(MainAssemblyIdentity)' != ''">
      <SentryRelease>%(MainAssemblyIdentity.Name)@%(Version)</SentryRelease>
    </PropertyGroup>
  </Target>

  <!-- Upload symbols (and any other debug information files) to Sentry after the build. -->
  <Target Name="UploadSymbolsToSentry" AfterTargets="AfterBuild" DependsOnTargets="_PrepareSentryCLI" Condition="'$(SentryUploadSymbols)' == 'true' And '$(SentryCLI)' != ''">
    <Message Importance="High" Text="Preparing to upload debug symbols to Sentry for $(MSBuildProjectName) ($(Configuration)/$(TargetFramework))" />
    <Exec Command="'$(SentryCLI)' upload-dif $(SentryCLIOptions) '$(IntermediateOutputPath)'" />
  </Target>

  <!-- Create release info in Sentry after a the build. -->
  <Target Name="CreateReleaseInSentry" AfterTargets="AfterBuild" DependsOnTargets="_PrepareSentryCLI;_GetSentryRelease"
    Condition="'$(SentryCreateRelease)' == 'true' And '$(SentryCLI)' != '' And '$(SentryRelease)' != ''">
    <Exec Command="'$(SentryCLI)' releases new $(SentryCLIOptions) '$(SentryRelease)'" />
  </Target>

</Project>
